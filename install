#!/usr/bin/env bash

if [ ! -f ~/.bash_aliases ]; then
    touch ~/.bash_aliases
fi

if [ ! -f ~/.bash_profile ]; then
    touch ~/.bash_profile
fi

if [ ! -f ~/.gitignore ]; then
    touch ~/.gitignore
fi

if [ ! -f ~/.pam_environment ]; then
    touch ~/.pam_environment
fi

function logout {
	clear
	echo "*** LOGOUT for the changes have effect ***"
	read -p "logout (y/N)? " answer; answer=${answer:-"n"}
	if [ "${answer}" == "y" ] ; then
		gnome-session-quit
	fi
}

# Do this only once
if [ "$UBUNTU_SETUP_INIT" == "true" ]; then
	echo "*** ONE TIME installation ***"

	# add user to virtualbox
	sudo adduser $(whoami) vboxsf

	# update ubuntu
	sudo apt-get update -y
	sudo apt-get upgrade -y

	# ask some general questions
	read -p "Email: (info@willembressers.nl)? " email; email=${email:-"info@willembressers.nl"}
	read -p "Name: (Willem Bressers)? " name; name=${name:-"Willem Bressers"}
	read -p "Project home: (~/Desktop/Projects)? " project_home; project_home=${project_home:-~/Desktop/Projects}

	# set the environment variables
	echo "UBUNTU_SETUP_INIT=\"true\"" >> ~/.pam_environment
	echo "UBUNTU_SETUP_EMAIL=\"$email\"" >> ~/.pam_environment
	echo "UBUNTU_SETUP_NAME=\"$name\"" >> ~/.pam_environment
	echo "UBUNTU_SETUP_PROJECT_HOME=$project_home" >> ~/.pam_environment

	mkdir -p $project_home
	echo "alias cdp='cd $project_home'" >> ~/.bash_aliases
	echo "alias logout=\"gnome-session-quit --force\"" >> ~/.bash_aliases
	echo "alias poweroff=\"gnome-session-quit --power-off\"" >> ~/.bash_aliases
	echo "alias reboot=\"gnome-session-quit --reboot\"" >> ~/.bash_aliases
	echo "alias lock=\"gnome-screensaver-command --lock\"" >> ~/.bash_aliases

	logout
fi

if [ ! -f ~/.ssh/id_rsa.pub ]; then
	echo "*** Setup ssh ***"

    ssh-keygen -t rsa -b 4096 -C $UBUNTU_SETUP_EMAIL
	cat ~/.ssh/id_rsa.pub
fi

read -p "Install vim (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	sudo apt-get install -y vim
	echo "EDITOR=$(which vim)" >> ~/.pam_environment
fi

read -p "Install sublime (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
	echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
	sudo apt-get update -y
	sudo apt-get install -y sublime-text
	echo "EDITOR=$(which subl)" >> ~/.pam_environment
	echo "*.sublime-project" >> ~/.gitignore
	echo "*.sublime-workspace" >> ~/.gitignore
fi 

read -p "Install git (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing git ***"
	sudo apt-get install -y git
	git config --global user.email $UBUNTU_SETUP_EMAIL
	git config --global user.name $UBUNTU_SETUP_NAME
	git config --global push.default simple
	git config --global core.excludesfile ~/.gitignore
fi

read -p "Install cuda (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing cuda ***"

	cd $UBUNTU_SETUP_PROJECT_HOME
	wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
	sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
	sudo apt-get update
	sudo apt-get install -y cuda
fi

read -p "Install opencv (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing opencv ***"

	# OS dependencies
	sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev

	cd $UBUNTU_SETUP_PROJECT_HOME
	wget https://github.com/opencv/opencv/archive/3.3.0.zip
	unzip 3.3.0.zip
	cd opencv-3.3.0/
	mkdir build
	cd build
	cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..
	make -j4
fi

read -p "Install darknet (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing darknet ***"

	cd $UBUNTU_SETUP_PROJECT_HOME
	git clone https://github.com/pjreddie/darknet.git
	cd darknet
	make
	mkdir -p obj
	wget https://pjreddie.com/media/files/yolo.weights
	wget https://pjreddie.com/media/files/tiny-yolo-voc.weights
fi

read -p "Install Docker (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	sudo apt-get install -y curl
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	sudo apt-get update
	sudo apt-get install -y docker-ce
	sudo usermod -aG docker ${USER}
	su - ${USER}
fi

read -p "Install pip (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	wget https://bootstrap.pypa.io/get-pip.py
	python get-pip.py --user
	rm get-pip.py
fi

read -p "Install virtualenvwrapper (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	pip install --user virtualenvwrapper

	# set the environment variables
	echo "WORKON_HOME=$HOME/.virtualenvs" >> ~/.pam_environment
	echo "PROJECT_HOME=$UBUNTU_SETUP_PROJECT_HOME"  >> ~/.pam_environment
	echo "VIRTUALENV_PYTHON=$(which python3)" >> ~/.pam_environment
	echo source $HOME/.local/bin/virtualenvwrapper.sh >> ~/.bashrc
	source ~/.bashrc
fi

read -p "Install RStudio Server (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing RStudio server ***"

	# install R
	sudo add-apt-repository "deb http://cran-mirror.cs.uu.nl/bin/linux/ubuntu xenial/"
	sudo apt-get update
	sudo apt-get install -y r-base
	sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9

	# install RStudio Server
	sudo apt-get install -y gdebi-core
	wget https://download2.rstudio.org/rstudio-server-1.0.153-amd64.deb
	sudo gdebi rstudio-server-1.0.153-amd64.deb

	# install Rjava
	sudo apt-get install default-jdk
	sudo R CMD javareconf
	sudo apt-get install r-cran-rjava
	sudo apt-get install libgdal1-dev libproj-dev

	echo "*** see: http://127.0.0.1:8787 ***"
fi

read -p "Install Bluemix CLI (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	echo "*** Installing Bluemix CLI ***"
	wget http://public.dhe.ibm.com/cloud/bluemix/cli/bluemix-cli/Bluemix_CLI_0.5.6_amd64.tar.gz
	tar -xvf Bluemix_CLI_0.5.6_amd64.tar.gz
	rm Bluemix_CLI_0.5.6_amd64.tar.gz
	cd Bluemix_CLI
	sudo ./install_bluemix_cli
	rm -rf Bluemix_CLI
fi

read -p "Install Cloud Foundry (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
	echo "deb http://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
	sudo apt-get update
	sudo apt-get install cf-cli
fi 

read -p "Install Kubernetes CLI (y/N)? " answer; answer=${answer:-"n"}
if [ "${answer}" == "y" ] ; then
	curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
	chmod +x ./kubectl
	sudo mv ./kubectl /usr/local/bin/kubectl
	kubectl cluster-info
	echo "source <(kubectl completion bash)" >> ~/.bashrc
fi


